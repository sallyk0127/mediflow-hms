generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                     Int           @id @default(autoincrement())
  title                  String?
  firstName              String
  middleName             String?
  lastName               String
  gender                 String
  preferredName          String?
  dob                    DateTime
  maritalStatus          String?
  email                  String?
  phoneNumber            String?
  address                String?
  emergencyContactName   String?
  emergencyContactNumber String?
  billingNote            String?
  previousNames          String?
  medicareNumber         String?
  insuranceProvider      String?
  policyNumber           String?
  coverageType           String?
  billingAddress         String?
  paymentMethod          String?
  attendingDoctor        String?
  medicalHistory         String?
  medications            String?
  allergies              String?
  conditions             String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  bedNumber              String?
  department             String?
  assignedRoom           String?
  appointments           Appointment[]
  beds                   Bed[]
}

model Bed {
  id          String    @id @default(cuid())
  bedId       String    @unique
  division    String
  patientName String?
  location    String
  status      BedStatus @default(AVAILABLE)
  usedUntil   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  patientId   Int?
  patient     Patient?  @relation(fields: [patientId], references: [id])
}

model Staff {
  id           String           @id @default(cuid())
  name         String
  staffId      String           @unique
  role         String
  createdAt    DateTime         @default(now())
  department   String
  appointments Appointment[]
  schedules    WeeklySchedule[]
}

model WeeklySchedule {
  id        String   @id @default(cuid())
  day       String
  startTime String
  endTime   String
  staffId   String
  weekStart DateTime @default(now())
  staff     Staff    @relation(fields: [staffId], references: [id])
}

model Medicine {
  id           Int                   @id @default(autoincrement())
  name         String
  type         String
  price        Float
  stock        Int
  expiry       DateTime
  manufacturer String
  code         String                @unique
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  appointments AppointmentMedicine[]
}

model Appointment {
  id                String                @id @default(cuid())
  patientId         Int
  doctorId          String
  department        String
  time              String
  date              DateTime
  severity          String
  reason            String
  contactPreference String
  status            String @default("new")
  createdAt         DateTime              @default(now())
  
  doctor            Staff                 @relation(fields: [doctorId], references: [id])
  patient           Patient               @relation(fields: [patientId], references: [id])
  medications       AppointmentMedicine[]
}

model AppointmentMedicine {
  appointmentId String
  medicineId    Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  medicine      Medicine    @relation(fields: [medicineId], references: [id])

  @@id([appointmentId, medicineId])
}

enum BedStatus {
  AVAILABLE
  OCCUPIED
}
