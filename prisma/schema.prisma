generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                     Int      @id @default(autoincrement())
  title                  String? // Title (e.g., Mr, Mrs, Miss)
  firstName              String
  middleName             String?
  lastName               String
  gender                 String
  preferredName          String?
  dob                    DateTime
  maritalStatus          String?
  email                  String?
  phoneNumber            String?
  address                String?
  emergencyContactName   String?
  emergencyContactNumber String?
  billingNote            String?
  previousNames          String?

  // Administration Information
  medicareNumber    String?
  insuranceProvider String?
  policyNumber      String?
  coverageType      String?
  billingAddress    String?
  paymentMethod     String?
  assignedRoom      String?
  department        String? 
  bedNumber         String?
  attendingDoctor   String?

  // Medical Information
  medicalHistory String?
  medications    String?
  allergies      String?
  conditions     String?

  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  beds Bed[]
}

model Bed {
  id          String    @id @default(cuid())
  bedId       String    @unique // E.g., MS-001
  division    String // E.g., "Med-Surgical", "ICU", "Maternity Care", etc.
  patientName String? // Null if available
  patientId   Int?
  location    String
  status      BedStatus @default(AVAILABLE)
  usedUntil   DateTime? // Null if available
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  patient     Patient? @relation(fields: [patientId], references: [id], onDelete: SetNull)
}

enum BedStatus {
  AVAILABLE
  OCCUPIED
}

model Staff {
  id         String           @id @default(cuid())
  name       String
  staffId    String           @unique
  role       String
  department String
  schedules  WeeklySchedule[] 
  appointments Appointment[]
  createdAt  DateTime         @default(now())
}

model WeeklySchedule {
  id        String   @id @default(cuid())
  day       String   // "Monday", "Tuesday", etc.
  startTime String   // e.g., "08:00"
  endTime   String   // e.g., "16:00"
  weekStart DateTime @default(now())
  staff     Staff    @relation(fields: [staffId], references: [id])
  staffId   String
}

model Medicine {
  id           Int      @id @default(autoincrement())
  name         String
  type         String
  price        Float
  stock        Int
  expiry       DateTime
  manufacturer String
  code         String   @unique
  appointments AppointmentMedicine[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Appointment {
  id                String       @id @default(cuid())
  patientId         Int
  doctorId          String
  department        String
  time              String
  date              DateTime
  severity          String
  reason            String
  contactPreference String
  createdAt         DateTime     @default(now())

  patient           Patient      @relation(fields: [patientId], references: [id])
  doctor            Staff        @relation(fields: [doctorId], references: [id])
  medications       AppointmentMedicine[]

}

model AppointmentMedicine {
  appointmentId String
  medicineId    Int

  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  medicine      Medicine    @relation(fields: [medicineId], references: [id])

  @@id([appointmentId, medicineId])
}
